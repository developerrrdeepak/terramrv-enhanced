import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  MessageCircle,
  Send,
  Mic,
  MicOff,
  Volume2,
  VolumeX,
  X,
  Bot,
  User,
  Languages,
  Minimize2,
  Maximize2,
} from "lucide-react";
import { toast } from "sonner";

interface Message {
  id: string;
  text: string;
  sender: "user" | "bot";
  timestamp: Date;
  language: string;
}

interface AIChatbotProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  selectedLanguage: string;
}

const languages = {
  en: { name: "English", flag: "ЁЯЗ║ЁЯЗ╕" },
  hi: { name: "рд╣рд┐рдВрджреА", flag: "ЁЯЗоЁЯЗ│" },
  bn: { name: "ржмрж╛ржВрж▓рж╛", flag: "ЁЯЗзЁЯЗй" },
  te: { name: "р░др▒Жр░▓р▒Бр░Чр▒Б", flag: "ЁЯЗоЁЯЗ│" },
  mr: { name: "рдорд░рд╛рдареА", flag: "ЁЯЗоЁЯЗ│" },
  ta: { name: "родрооро┐ро┤рпН", flag: "ЁЯЗоЁЯЗ│" },
  gu: { name: "ркЧрлБркЬрк░рк╛ркдрлА", flag: "ЁЯЗоЁЯЗ│" },
  kn: { name: "р▓Хр▓ир│Нр▓ир▓б", flag: "ЁЯЗоЁЯЗ│" },
  pa: { name: "рикрй░риЬри╛римрйА", flag: "ЁЯЗоЁЯЗ│" },
};

// Mock AI responses for different languages
const mockResponses = {
  en: {
    greeting:
      "Hello! I'm Kisan AI, your farming assistant. How can I help you today?",
    carbonCredits:
      "Carbon credits are certificates that represent the reduction of one metric ton of CO2. Farmers can earn them through sustainable practices like agroforestry, improved soil management, and methane reduction in rice farming.",
    mrvProcess:
      "MRV stands for Monitoring, Reporting, and Verification. It's a process to track and verify your carbon reduction activities. Our system uses satellite data, IoT sensors, and field verification to ensure accurate measurements.",
    helpOptions:
      "I can help you with: ЁЯМ▒ Carbon credit information, ЁЯУК MRV process, ЁЯТ░ Income calculation, ЁЯМ╛ Farming best practices, ЁЯУ▒ App usage, and much more!",
  },
  hi: {
    greeting:
      "рдирдорд╕реНрддреЗ! рдореИрдВ рдХрд┐рд╕рд╛рди AI рд╣реВрдВ, рдЖрдкрдХрд╛ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?",
    carbonCredits:
      "рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ рдкреНрд░рдорд╛рдгрдкрддреНрд░ рд╣реИрдВ рдЬреЛ рдПрдХ рдореАрдЯреНрд░рд┐рдХ рдЯрди CO2 рдХреА рдХрдореА рдХреЛ рджрд░реНрд╢рд╛рддреЗ рд╣реИрдВред рдХрд┐рд╕рд╛рди рд╡рд╛рдирд┐рдХреА, рдмреЗрд╣рддрд░ рдорд┐рдЯреНрдЯреА рдкреНрд░рдмрдВрдзрди, рдФрд░ рдзрд╛рди рдХреА рдЦреЗрддреА рдореЗрдВ рдореАрдереЗрди рдХрдореА рдЬреИрд╕реЗ рдЯрд┐рдХрд╛рдК рддрд░реАрдХреЛрдВ рд╕реЗ рдЗрдиреНрд╣реЗрдВ рдХрдорд╛ рд╕рдХрддреЗ рд╣реИрдВред",
    mrvProcess:
      "MRV рдХрд╛ рдорддрд▓рдм рд╣реИ рдирд┐рдЧрд░рд╛рдиреА, рд░рд┐рдкреЛрд░реНрдЯрд┐рдВрдЧ рдФрд░ рд╕рддреНрдпрд╛рдкрдиред рдпрд╣ рдЖрдкрдХреА рдХрд╛рд░реНрдмрди рдХрдореА рдЧрддрд┐рд╡рд┐рдзрд┐рдпреЛрдВ рдХреЛ рдЯреНрд░реИрдХ рдФрд░ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░рдиреЗ рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд╣реИред",
    helpOptions:
      "рдореИрдВ рдЗрдирдореЗрдВ я┐╜я┐╜я┐╜рдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ: ЁЯМ▒ рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ рдЬрд╛рдирдХрд╛рд░реА, ЁЯУК MRV рдкреНрд░рдХреНрд░рд┐рдпрд╛, ЁЯТ░ рдЖрдп рдЧрдгрдирд╛, ЁЯМ╛ рдЦреЗрддреА рдХреА рдмреЗрд╣рддрд░ рдкреНрд░рдерд╛рдПрдВ!",
  },
};

export default function AIChatbot({
  open,
  onOpenChange,
  selectedLanguage,
}: AIChatbotProps) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [chatLanguage, setChatLanguage] = useState(selectedLanguage);

  const recognition = useRef<any>(null);
  const synthesis = useRef<any>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // Initialize speech recognition and synthesis
  useEffect(() => {
    if (typeof window !== "undefined") {
      // Speech Recognition
      if (
        "webkitSpeechRecognition" in window ||
        "SpeechRecognition" in window
      ) {
        const SpeechRecognition =
          (window as any).webkitSpeechRecognition ||
          (window as any).SpeechRecognition;
        recognition.current = new SpeechRecognition();
        recognition.current.continuous = false;
        recognition.current.interimResults = false;
        recognition.current.lang = getLanguageCode(chatLanguage);

        recognition.current.onresult = (event: any) => {
          const transcript = event.results[0][0].transcript;
          setInputMessage(transcript);
          setIsListening(false);
        };

        recognition.current.onerror = () => {
          setIsListening(false);
          toast.error("Voice recognition failed. Please try again.");
        };
      }

      // Speech Synthesis
      if ("speechSynthesis" in window) {
        synthesis.current = window.speechSynthesis;
      }
    }
  }, [chatLanguage]);

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // Welcome message when chat opens
  useEffect(() => {
    if (open && messages.length === 0) {
      const welcomeMessage: Message = {
        id: Date.now().toString(),
        text:
          mockResponses[chatLanguage as keyof typeof mockResponses]?.greeting ||
          mockResponses.en.greeting,
        sender: "bot",
        timestamp: new Date(),
        language: chatLanguage,
      };
      setMessages([welcomeMessage]);
    }
  }, [open, chatLanguage]);

  const getLanguageCode = (lang: string) => {
    const codes: { [key: string]: string } = {
      en: "en-US",
      hi: "hi-IN",
      bn: "bn-IN",
      te: "te-IN",
      mr: "mr-IN",
      ta: "ta-IN",
      gu: "gu-IN",
      kn: "kn-IN",
      pa: "pa-IN",
    };
    return codes[lang] || "en-US";
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputMessage,
      sender: "user",
      timestamp: new Date(),
      language: chatLanguage,
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputMessage("");

    // Simulate AI response
    setTimeout(() => {
      const botResponse = generateBotResponse(inputMessage, chatLanguage);
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        sender: "bot",
        timestamp: new Date(),
        language: chatLanguage,
      };
      setMessages((prev) => [...prev, botMessage]);

      // Speak the response if enabled
      if (synthesis.current && !isSpeaking) {
        speakMessage(botResponse, chatLanguage);
      }
    }, 1000);
  };

  const generateBotResponse = (userInput: string, language: string) => {
    const input = userInput.toLowerCase();
    const responses =
      mockResponses[language as keyof typeof mockResponses] || mockResponses.en;

    if (input.includes("carbon") || input.includes("рдХрд╛рд░реНрдмрди")) {
      return responses.carbonCredits;
    } else if (input.includes("mrv") || input.includes("рдирд┐рдЧрд░рд╛рдиреА")) {
      return responses.mrvProcess;
    } else if (input.includes("help") || input.includes("рдорджрдж")) {
      return responses.helpOptions;
    } else if (
      input.includes("price") ||
      input.includes("income") ||
      input.includes("рдХрдорд╛рдИ") ||
      input.includes("рдЖрдп")
    ) {
      return language === "hi"
        ? "рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ рдХреА рдХреАрдордд тВ╣400-600 рдкреНрд░рддрд┐ рдЯрди рд╣реИред рдПрдХ рд╣реЗрдХреНрдЯреЗрдпрд░ рд╕реЗ рдЖрдк рд╕рд╛рд▓рд╛рдирд╛ 2-5 рдЯрди рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ рдХрдорд╛ рд╕рдХрддреЗ рд╣реИрдВ, рдЬрд┐рд╕рд╕реЗ тВ╣800-3000 рдХреА рдЕрддрд┐рд░рд┐рдХреНрдд рдЖрдп рд╣реЛ рд╕рдХрддреА рд╣реИред"
        : "Carbon credit prices range from тВ╣400-600 per ton. You can earn 2-5 tons of carbon credits per hectare annually, generating тВ╣800-3000 additional income.";
    } else if (
      input.includes("register") ||
      input.includes("signup") ||
      input.includes("рдкрдВрдЬреАрдХрд░рдг")
    ) {
      return language === "hi"
        ? "рдкрдВрдЬреАрдХрд░рдг рдХреЗ рд▓рд┐рдП: 1) 'Sign in (Farmer)' рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ, 2) рдЕрдкрдирд╛ рдИрдореЗрд▓ рджрд░реНрдЬ рдХрд░реЗрдВ, 3) OTP рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ, 4) рдЕрдкрдиреА рдкреНрд░реЛрдлрд╛рдЗрд▓ рдкреВрд░реА рдХрд░реЗрдВред"
        : "To register: 1) Click 'Sign in (Farmer)' button, 2) Enter your email, 3) Verify OTP, 4) Complete your profile.";
    } else {
      return language === "hi"
        ? "рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдХреГрдкрдпрд╛ рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ, MRV рдкреНрд░рдХреНрд░рд┐рдпрд╛, рдпрд╛ рдХрдорд╛рдИ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВред рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБ!"
        : "I didn't understand. Please ask about carbon credits, MRV process, or earnings. I'm here to help you!";
    }
  };

  const startListening = () => {
    if (recognition.current) {
      setIsListening(true);
      recognition.current.lang = getLanguageCode(chatLanguage);
      recognition.current.start();
    } else {
      toast.error("Voice recognition not supported in your browser");
    }
  };

  const stopListening = () => {
    if (recognition.current) {
      recognition.current.stop();
      setIsListening(false);
    }
  };

  const speakMessage = (text: string, language: string) => {
    if (synthesis.current) {
      setIsSpeaking(true);
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = getLanguageCode(language);
      utterance.rate = 0.8;
      utterance.pitch = 1;

      utterance.onend = () => setIsSpeaking(false);
      utterance.onerror = () => setIsSpeaking(false);

      synthesis.current.speak(utterance);
    }
  };

  const stopSpeaking = () => {
    if (synthesis.current) {
      synthesis.current.cancel();
      setIsSpeaking(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-2xl h-[80vh] p-0">
        <DialogHeader className="p-4 pb-2">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2">
              <div className="bg-gradient-to-r from-green-600 to-emerald-600 p-2 rounded-full">
                <Bot className="h-5 w-5 text-white" />
              </div>
              <div>
                <DialogTitle className="flex items-center space-x-2">
                  <span>Kisan AI Assistant</span>
                  <Badge
                    variant="outline"
                    className="bg-green-50 text-green-700"
                  >
                    ЁЯЯв Online
                  </Badge>
                </DialogTitle>
                <p className="text-sm text-gray-600">
                  Multilingual farming support
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Select value={chatLanguage} onValueChange={setChatLanguage}>
                <SelectTrigger className="w-32">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {Object.entries(languages).map(([code, lang]) => (
                    <SelectItem key={code} value={code}>
                      <span className="flex items-center space-x-2">
                        <span>{lang.flag}</span>
                        <span>{lang.name}</span>
                      </span>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <Button
                variant="outline"
                size="sm"
                onClick={() => setIsMinimized(!isMinimized)}
              >
                {isMinimized ? (
                  <Maximize2 className="h-4 w-4" />
                ) : (
                  <Minimize2 className="h-4 w-4" />
                )}
              </Button>
            </div>
          </div>
        </DialogHeader>

        {!isMinimized && (
          <div className="flex flex-col flex-1 min-h-0">
            {/* Chat Messages */}
            <ScrollArea className="flex-1 p-4">
              <div className="space-y-4">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}
                  >
                    <div
                      className={`max-w-[80%] rounded-lg p-3 ${
                        message.sender === "user"
                          ? "bg-green-600 text-white ml-4"
                          : "bg-gray-100 text-gray-900 mr-4"
                      }`}
                    >
                      <div className="flex items-start space-x-2">
                        {message.sender === "bot" && (
                          <Bot className="h-4 w-4 mt-1 text-green-600" />
                        )}
                        {message.sender === "user" && (
                          <User className="h-4 w-4 mt-1 text-white" />
                        )}
                        <div className="flex-1">
                          <p className="text-sm">{message.text}</p>
                          <p className="text-xs opacity-70 mt-1">
                            {message.timestamp.toLocaleTimeString()}
                          </p>
                        </div>
                        {message.sender === "bot" && (
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() =>
                              speakMessage(message.text, message.language)
                            }
                            className="h-6 w-6 p-0"
                          >
                            <Volume2 className="h-3 w-3" />
                          </Button>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
                <div ref={messagesEndRef} />
              </div>
            </ScrollArea>

            {/* Quick Actions */}
            <div className="p-4 border-t">
              <div className="flex flex-wrap gap-2 mb-3">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() =>
                    setInputMessage(
                      chatLanguage === "hi"
                        ? "рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ рдХреНрдпрд╛ рд╣реИ?"
                        : "What are carbon credits?",
                    )
                  }
                >
                  {chatLanguage === "hi"
                    ? "ЁЯМ▒ рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ"
                    : "ЁЯМ▒ Carbon Credits"}
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() =>
                    setInputMessage(
                      chatLanguage === "hi"
                        ? "рдореИрдВ рдХреИрд╕реЗ рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд░реВрдВ?"
                        : "How do I register?",
                    )
                  }
                >
                  {chatLanguage === "hi" ? "ЁЯУЭ рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд░реЗрдВ" : "ЁЯУЭ Register"}
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() =>
                    setInputMessage(
                      chatLanguage === "hi"
                        ? "рдореИрдВ рдХрд┐рддрдирд╛ рдХрдорд╛ рд╕рдХрддрд╛ рд╣реВрдВ?"
                        : "How much can I earn?",
                    )
                  }
                >
                  {chatLanguage === "hi" ? "ЁЯТ░ рдХрдорд╛рдИ" : "ЁЯТ░ Earnings"}
                </Button>
              </div>

              {/* Input Area */}
              <div className="flex items-center space-x-2">
                <div className="flex-1 relative">
                  <Input
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    placeholder={
                      chatLanguage === "hi"
                        ? "рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдЯрд╛рдЗрдк рдХрд░реЗрдВ..."
                        : "Type your question..."
                    }
                    onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                    className="pr-12"
                  />
                  <Button
                    variant="ghost"
                    size="sm"
                    className={`absolute right-1 top-1 h-8 w-8 ${isListening ? "text-red-600" : "text-gray-600"}`}
                    onClick={isListening ? stopListening : startListening}
                  >
                    {isListening ? (
                      <MicOff className="h-4 w-4" />
                    ) : (
                      <Mic className="h-4 w-4" />
                    )}
                  </Button>
                </div>
                <Button
                  onClick={handleSendMessage}
                  disabled={!inputMessage.trim()}
                  className="bg-green-600 hover:bg-green-700"
                >
                  <Send className="h-4 w-4" />
                </Button>
                <Button
                  variant="outline"
                  onClick={isSpeaking ? stopSpeaking : () => {}}
                  className={isSpeaking ? "text-red-600" : "text-gray-600"}
                >
                  {isSpeaking ? (
                    <VolumeX className="h-4 w-4" />
                  ) : (
                    <Volume2 className="h-4 w-4" />
                  )}
                </Button>
              </div>
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
