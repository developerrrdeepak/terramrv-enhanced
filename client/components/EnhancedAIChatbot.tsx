import { useState, useRef, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  MessageCircle,
  Send,
  Mic,
  MicOff,
  Volume2,
  VolumeX,
  X,
  Bot,
  User,
  Languages,
  Minimize2,
  Maximize2,
  Phone,
  PhoneOff,
  Copy,
  RotateCcw,
  Settings,
  Sparkles,
  Zap,
  Heart,
  Loader2,
} from "lucide-react";
import { toast } from "sonner";
import { cn } from "@/lib/utils";

interface Message {
  id: string;
  text: string;
  sender: "user" | "bot";
  timestamp: Date;
  language: string;
  type?: "text" | "voice";
  isTyping?: boolean;
}

interface EnhancedAIChatbotProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  selectedLanguage: string;
}

const languages = {
  en: { name: "English", flag: "ЁЯЗ║ЁЯЗ╕", voice: "en-US" },
  hi: { name: "рд╣рд┐рдВрджреА", flag: "ЁЯЗоЁЯЗ│", voice: "hi-IN" },
  bn: { name: "ржмрж╛ржВрж▓рж╛", flag: "ЁЯЗзЁЯЗй", voice: "bn-IN" },
  te: { name: "р░др▒Жр░▓р▒Бр░Чр▒Б", flag: "ЁЯЗоЁЯЗ│", voice: "te-IN" },
  mr: { name: "рдорд░рд╛рдареА", flag: "ЁЯЗоЁЯЗ│", voice: "mr-IN" },
  ta: { name: "родрооро┐ро┤рпН", flag: "ЁЯЗоЁЯЗ│", voice: "ta-IN" },
  gu: { name: "ркЧрлБркЬрк░рк╛ркдрлА", flag: "ЁЯЗоЁЯЗ│", voice: "gu-IN" },
  kn: { name: "р▓Хр▓ир│Нр▓ир▓б", flag: "ЁЯЗоЁЯЗ│", voice: "kn-IN" },
  pa: { name: "рикрй░риЬри╛римрйА", flag: "ЁЯЗоЁЯЗ│", voice: "pa-IN" },
};

// Enhanced AI responses with more context and personality
const enhancedResponses = {
  en: {
    greeting:
      "ЁЯСЛ Hello! I'm **Kisan AI**, your intelligent farming companion! I'm here to help you with carbon credits, sustainable farming practices, and maximizing your agricultural income. How can I assist you today?",
    carbonCredits: `ЁЯМ▒ **Carbon Credits - Your Green Gold!**

Carbon credits are certificates that represent reducing 1 metric ton of CO2 from the atmosphere. Here's how farmers like you can benefit:

**ЁЯТ░ Earning Potential:**
- тВ╣400-600 per carbon credit
- 2-5 credits per hectare annually
- Additional income of тВ╣800-3,000 per hectare

**ЁЯМ╛ How to Earn:**
тАв **Agroforestry**: Plant trees alongside crops
тАв **Improved Soil Management**: Reduce tillage, cover crops
тАв **Rice Farming**: Alternate wetting/drying methods
тАв **Biomass Management**: Proper crop residue handling

Would you like me to calculate your potential earnings based on your farm size?`,

    mrvProcess: `ЁЯУК **MRV Process - Made Simple!**

MRV stands for **Monitoring, Reporting & Verification**. Think of it as your farm's carbon passport:

**ЁЯЫ░я╕П Monitoring**: We track your activities using:
- Satellite imagery
- Your smartphone data
- IoT sensors on your farm
- Regular field visits

**ЁЯУ▒ Reporting**: You simply:
- Take photos of your activities
- Answer voice questions in your language
- Upload through our mobile app

**тЬЕ Verification**: Our AI + experts verify:
- Your carbon reduction activities
- Calculate accurate credit amounts
- Ensure global standards compliance

The best part? Everything happens automatically in the background!`,

    registration: `ЁЯУЭ **Farmer Registration - Join the Carbon Revolution!**

Registration is simple and FREE! Here's what you need:

**ЁЯУЛ Required Information:**
тАв Email address or phone number
тАв Farm location (we'll help with GPS)
тАв Land size (approximate is fine)
тАв Current crops grown
тАв Basic farming practices

**ЁЯОБ Registration Benefits:**
тАв Free carbon potential assessment
тАв Real-time earning calculations
тАв Expert farming advice in your language
тАв Priority access to carbon projects
тАв Monthly income reports

**тЪб Quick Steps:**
1. Click 'Sign in (Farmer)' above
2. Verify with OTP
3. Complete your farm profile
4. Start earning from day 1!

Ready to transform your farming income?`,

    earnings: `ЁЯТ░ **Your Carbon Earning Potential**

Let me break down realistic income projections:

**ЁЯМ╛ Small Farm (1-2 hectares):**
- Carbon credits: 2-8 per year
- Additional income: тВ╣800-4,800 annually
- Monthly average: тВ╣65-400

**ЁЯМ│ Medium Farm (3-5 hectares):**
- Carbon credits: 6-25 per year  
- Additional income: тВ╣2,400-15,000 annually
- Monthly average: тВ╣200-1,250

**ЁЯЪЬ Large Farm (5+ hectares):**
- Carbon credits: 10-50+ per year
- Additional income: тВ╣4,000-30,000+ annually
- Monthly average: тВ╣330-2,500+

**ЁЯТб Pro Tips to Maximize Earnings:**
тАв Combine multiple carbon activities
тАв Join our farmer groups for better rates
тАв Use our recommended sustainable practices
тАв Maintain consistent documentation

Want me to calculate specific earnings for your farm?`,

    helpOptions: `ЁЯдЦ **I'm Your Complete Farming Assistant!**

Here's everything I can help you with:

**ЁЯМ▒ Carbon & Sustainability:**
тАв Carbon credit opportunities
тАв Sustainable farming practices
тАв Environmental certifications
тАв Climate-smart agriculture

**ЁЯТ░ Financial Planning:**
тАв Income calculations
тАв Cost-benefit analysis
тАв Government scheme information
тАв Market price predictions

**ЁЯУ▒ Technology Support:**
тАв App usage guidance
тАв Voice command help
тАв Photo documentation tips
тАв Data syncing troubleshooting

**ЁЯМ╛ Farming Expertise:**
тАв Crop advisory
тАв Weather forecasts
тАв Pest management
тАв Soil health tips

**ЁЯОп Voice Commands You Can Try:**
"Calculate my earnings"
"Show carbon projects"
"What crops should I plant?"
"How do I register?"

Just speak naturally - I understand context and remember our conversation!`,

    voiceHelp: `ЁЯОд **Voice Assistant - Speak Naturally!**

I'm designed to understand your natural speech in multiple languages:

**ЁЯЧгя╕П Voice Features:**
тАв Continuous conversation mode
тАв Interrupt and ask follow-ups
тАв Voice-to-voice responses
тАв Background noise filtering

**ЁЯУЮ Phone Call Mode:**
тАв Just like talking to a friend
тАв Hands-free farming consultation
тАв Works while you're in the field
тАв Auto-saves important information

**ЁЯМР Language Support:**
тАв Hindi, English, and 7+ regional languages
тАв Mixed language conversations (Hinglish)
тАв Automatic language detection
тАв Context-aware responses

**ЁЯТб Try These Voice Commands:**
"Hey Kisan, рдореЗрд░реА рдлрд╕рд▓ рдХрд╛ рд╣рд╛рд▓ рдмрддрд╛рдУ"
"Calculate carbon credits for wheat farming"
"ржХрж╛рж░рзНржмржи ржХрзНрж░рзЗржбрж┐ржЯ ржХрж┐?" (in Bengali)
"ркоркирлЗ ркЧрлБркЬрк░рк╛ркдрлАркорк╛ркВ рк╕ркоркЬрк╛рк╡рлЛ" (in Gujarati)

Ready to chat? Just click the microphone! ЁЯОд`,
  },
  hi: {
    greeting:
      "ЁЯЩП рдирдорд╕реНрддреЗ! рдореИрдВ **рдХрд┐рд╕рд╛рди AI** рд╣реВрдВ, рдЖрдкрдХрд╛ рдмреБрджреНрдзрд┐рдорд╛рди рдЦреЗрддреА рд╕рд╛рдереА! рдореИрдВ рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ, рдЯрд┐рдХрд╛рдК рдЦреЗрддреА рдФрд░ рдЖрдкрдХреА рдХреГрд╖рд┐ рдЖрдп рдмрдврд╝рд╛рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реВрдВред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рд╕реЗрд╡рд╛ рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?",
    carbonCredits: `ЁЯМ▒ **рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ - рдЖрдкрдХрд╛ рд╣рд░рд╛ рд╕реЛрдирд╛!**

рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ рдРрд╕реЗ рдкреНрд░рдорд╛рдгрдкрддреНрд░ рд╣реИрдВ рдЬреЛ 1 рдореАрдЯреНрд░рд┐рдХ рдЯрди CO2 рдХрдо рдХрд░рдиреЗ рдХрд╛ рдкреНрд░рддрд┐рдирд┐рдзрд┐рддреНрд╡ рдХрд░рддреЗ рд╣реИрдВред рдЬрд╛рдирд┐рдП рдХреИрд╕реЗ рдлрд╛рдпрджрд╛ рдЙрдард╛рдПрдВ:

**ЁЯТ░ рдХрдорд╛рдИ рдХреА рд╕рдВрднрд╛рд╡рдирд╛:**
- тВ╣400-600 рдкреНрд░рддрд┐ рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ
- 2-5 рдХреНрд░реЗрдбрд┐рдЯ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░ рд╕рд╛рд▓рд╛рдирд╛
- тВ╣800-3,000 рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░ рдЕрддрд┐рд░рд┐рдХреНрдд рдЖрдп

**ЁЯМ╛ рдХреИрд╕реЗ рдХрдорд╛рдПрдВ:**
тАв **рд╡рд╛рдирд┐рдХреА**: рдлрд╕рд▓реЛрдВ рдХреЗ рд╕рд╛рде рдкреЗрдбрд╝ рд▓рдЧрд╛рдПрдВ
тАв **рдорд┐рдЯреНрдЯреА рдкреНрд░рдмрдВрдзрди**: рдХрдо рдЬреБрддрд╛рдИ, рдЖрд╡рд░рдг рдлрд╕рд▓реЗрдВ
тАв **рдзрд╛рди рдХреА рдЦреЗрддреА**: рд╕реАрдзреА рдмреБрд╡рд╛рдИ рд╡рд┐рдзрд┐
тАв **рдлрд╕рд▓ рдЕрд╡рд╢реЗрд╖**: рдЙрдЪрд┐рдд рдкя┐╜я┐╜рд░рдмрдВрдзрди

рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐ рдореИрдВ рдЖрдкрдХреЗ рдЦреЗрдд рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╕рдВрднрд╛рд╡рд┐рдд рдХрдорд╛рдИ рдХреА рдЧрдгрдирд╛ рдХрд░реВрдВ?`,

    mrvProcess: `ЁЯУК **MRV рдкреНрд░рдХреНрд░рд┐рдпрд╛ - рдЖрд╕рд╛рди рднрд╛рд╖рд╛ рдореЗрдВ!**

MRV рдпрд╛рдиреА **рдирд┐рдЧрд░рд╛рдиреА, рд░рд┐рдкреЛрд░реНрдЯрд┐рдВрдЧ рдФрд░ рд╕рддреНрдпрд╛рдкрди**ред рдЗрд╕реЗ рдЕрдкрдиреЗ рдЦреЗрдд рдХрд╛ рдХрд╛рд░реНрдмрди рдкрд╛рд╕рдкреЛрд░реНрдЯ рд╕рдордЭреЗрдВ:

**ЁЯЫ░я╕П рдирд┐рдЧрд░рд╛рдиреА**: рд╣рдо рдЯреНрд░реИрдХ рдХрд░рддреЗ рд╣реИрдВ:
- рдЙрдкрдЧреНрд░рд╣ рдЪрд┐рддреНрд░
- рдЖрдкрдХреЗ рд╕реНрдорд╛рд░реНрдЯрдлреЛрди рдХрд╛ рдбреЗрдЯрд╛  
- рдЦреЗрдд рдореЗрдВ IoT рд╕реЗрдВрд╕рд░
- рдирд┐рдпрдорд┐рдд рдХреНрд╖реЗрддреНрд░реАрдп рджреМрд░реЗ

**ЁЯУ▒ рд░рд┐рдкреЛрд░реНрдЯрд┐рдВрдЧ**: рдЖрдк рдмрд╕:
- рдЕрдкрдиреА рдЧрддрд┐рд╡рд┐рдзрд┐рдпреЛрдВ рдХреА рдлреЛрдЯреЛ рд▓реЗрдВ
- рдЕрдкрдиреА рднрд╛рд╖рд╛ рдореЗрдВ рдЖрд╡рд╛рдЬрд╝реА рд╕рд╡рд╛рд▓реЛрдВ рдХреЗ рдЬрд╡рд╛рдм рджреЗрдВ
- рдореЛрдмрд╛рдЗрд▓ рдРрдк рд╕реЗ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ

**тЬЕ рд╕рддреНрдпрд╛рдкрди**: рд╣рдорд╛рд░реА AI + рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ:
- рдЖрдкрдХреА рдХрд╛рд░реНрдмрди рдХрдореА рдЧрддрд┐рд╡рд┐рдзрд┐рдпреЛрдВ рдХреА рдЬрд╛рдВрдЪ
- рд╕рдЯреАрдХ рдХреНрд░реЗрдбрд┐рдЯ рд░рд╛рд╢рд┐ рдХреА рдЧрдгрдирд╛
- рд╡реИрд╢реНрд╡рд┐рдХ рдорд╛рдирдХреЛрдВ рдХрд╛ рдЕрдиреБрдкрд╛рд▓рди рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рдирд╛

рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреА рдмрд╛рдд? рд╕рдм рдХреБрдЫ рдЕрдкрдиреЗ рдЖрдк рдкреАрдЫреЗ рд╣реЛрддрд╛ рд░рд╣рддрд╛ рд╣реИ!`,

    registration: `ЁЯУЭ **рдХрд┐рд╕рд╛рди рдкрдВрдЬреАрдХрд░рдг - рдХрд╛рд░реНрдмрди рдХреНрд░рд╛рдВрддрд┐ рдореЗрдВ рд╢рд╛рдорд┐рд▓ рд╣реЛрдВ!**

рдкрдВрдЬреАрдХрд░рдг рдЖрд╕рд╛рди рдФрд░ рдмрд┐рд▓реНрдХреБрд▓ рдореБрдлреНрдд рд╣реИ! рдЖрдкрдХреЛ рдЪя┐╜я┐╜рд╣рд┐рдП:

**ЁЯУЛ рдЖрд╡рд╢реНрдпрдХ рдЬрд╛рдирдХрд╛рд░реА:**
тАв рдИрдореЗрд▓ рдкрддрд╛ рдпрд╛ рдлреЛрди рдирдВрдмрд░
тАв рдЦреЗрдд рдХрд╛ рд╕реНрдерд╛рди (рд╣рдо GPS рд╕реЗ рдорджрдж рдХрд░реЗрдВрдЧреЗ)
тАв рдЬрдореАрди рдХрд╛ рдЖрдХрд╛рд░ (рдЕрдиреБрдорд╛рдирд┐рдд рдареАрдХ рд╣реИ)
тАв рд╡рд░реНрддрдорд╛рди рдлрд╕рд▓реЗрдВ
тАв рдмреБрдирд┐рдпрд╛рджреА рдЦреЗрддреА рдХреЗ рддрд░реАрдХреЗ

**ЁЯОБ рдкрдВрдЬреАрдХрд░рдг рдХреЗ рдлрд╛рдпрджреЗ:**
тАв рдореБрдлреНрдд рдХрд╛рд░реНрдмрди рдХреНрд╖рдорддрд╛ рдХрд╛ рдЖрдХрд▓рди
тАв рд░рд┐рдпрд▓-рдЯрд╛рдЗрдо рдХрдорд╛рдИ рдХреА рдЧрдгрдирд╛
тАв рдЖрдкрдХреА рднрд╛рд╖рд╛ рдореЗрдВ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕рд▓рд╛рд╣
тАв рдХрд╛рд░реНрдмрди рдкрд░рд┐рдпреЛрдЬрдирд╛рдУрдВ рддрдХ рдкреНрд░рд╛рдердорд┐рдХрддрд╛ рдкрд╣реБрдВрдЪ
тАв рдорд╛рд╕рд┐рдХ рдЖрдп рд░рд┐рдкреЛрд░реНрдЯ

**тЪб рдЖрд╕рд╛рди рдХрджрдо:**
1. рдКрдкрд░ 'рд╕рд╛рдЗрди рдЗрди (рдХрд┐рд╕рд╛рди)' рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ
2. OTP рд╕реЗ рд╕рддреНрдпрд╛рдкрд┐рдд рдХрд░реЗрдВ
3. рдЕрдкрдиреА рдЦреЗрддреА рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рдкреВрд░реА рдХрд░реЗрдВ
4. рдкрд╣рд▓реЗ рджрд┐рди рд╕реЗ рдХрдорд╛рдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ!

рдЕрдкрдиреА рдЦреЗрддреА рдХреА рдЖрдп рдмрджрд▓рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИрдВ?`,

    earnings: `ЁЯТ░ **рдЖрдкрдХреА рдХрд╛рд░реНрдмрди рдХя┐╜я┐╜я┐╜рд╛рдИ рдХреА рд╕рдВрднрд╛рд╡рдирд╛**

рдЖрдЗрдП рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдЖрдп рдХрд╛ рдЕрдиреБрдорд╛рди рджреЗрдЦрддреЗ рд╣реИрдВ:

**ЁЯМ╛ рдЫреЛрдЯрд╛ рдЦреЗрдд (1-2 рд╣реЗрдХреНрдЯреЗрдпрд░):**
- рдХрд╛рд░реНрдмрди рдХреНрд░я┐╜я┐╜рдбрд┐рдЯ: 2-8 рдкреНрд░рддрд┐ рд╡рд░реНрд╖
- рдЕрддрд┐рд░рд┐рдХреНрдд рдЖрдп: тВ╣800-4,800 рд╡рд╛рд░реНрд╖рд┐рдХ

**ЁЯЪЬ рдордзреНрдпрдо рдЦреЗрдд (3-5 рд╣реЗрдХреНрдЯреЗрдпрд░):**
- рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ: 6-25 рдкреНрд░рддрд┐ рд╡рд░реНрд╖
- рдЕрддрд┐рд░рд┐рдХреНрдд рдЖрдп: тВ╣2,400-15,000 рд╡рд╛рд░реНрд╖рд┐рдХ

**ЁЯМ╛ рдмрдбрд╝рд╛ рдЦреЗрдд (5+ рд╣реЗрдХреНрдЯреЗрдпрд░):**
- рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ: 10-50+ рдкреНрд░рддрд┐ рд╡рд░реНрд╖
- рдЕрддрд┐рд░рд┐рдХреНрдд рдЖрдп: тВ╣4,000-30,000+ рд╡рд╛рд░реНрд╖рд┐рдХ

рдпрд╣ рд░рд╛рд╢рд┐ рдЖрдкрдХреА рдирд┐рдпрдорд┐рдд рдЦреЗрддреА рдЖрдп рдХреЗ рдЕрддрд┐рд░рд┐рдХреНрдд рд╣реИ! рдореБрдЭреЗ рдЕрдкрдиреЗ рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░ рдмрддрд╛рдПрдВ рдФрд░ рдореИрдВ рд╕рдЯреАрдХ рдЧрдгрдирд╛ рдХрд░реВрдВрдЧрд╛ред`,

    voiceHelp: `ЁЯОд **рдЖрд╡рд╛рдЬрд╝реА рд╕рд╣рд╛рдпрддрд╛ - рдЕрдкрдиреА рднрд╛рд╖рд╛ рдореЗрдВ рдмрд╛рдд рдХрд░реЗрдВ!**

рдмрд╕ рдорд╛рдЗрдХ рдмрдЯрди рджрдмрд╛рдПрдВ рдФрд░ рдкреНрд░рд╛рдХреГрддрд┐рдХ рд░реВрдк рд╕реЗ рдмреЛрд▓реЗрдВ:

**ЁЯУЮ рдХрдорд╛рдВрдб рдЙрджрд╛рд╣рд░рдг:**
тАв "рдореЗрд░реА рдЬрдореАрди 2 рд╣реЗрдХреНрдЯреЗрдпрд░ рд╣реИ, рдХрд┐рддрдирд╛ рдХрдорд╛ рд╕рдХрддрд╛ рд╣реВрдВ?"
тАв "рдзрд╛рди рдХреА рдЦреЗрддреА рдореЗрдВ рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ рдХреИрд╕реЗ рдорд┐рд▓я┐╜я┐╜я┐╜рдЧрд╛?"
тАв "рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдХреА рдкреВрд░реА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдмрддрд╛рдУ"
тАв "рдХреМрди рд╕реА рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреА рд╣реИ?"

**ЁЯМЯ рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ:**
тАв рдЖрдкрдХреА рдЖрд╡рд╛рдЬрд╝ рдХреЛ рддреБрд░рдВрдд рдкрд╣рдЪрд╛рдирддрд╛ рд╣реВрдВ
тАв рд╣рд┐рдВрджреА, рдЕрдВрдЧреНрд░реЗрдЬреА рдФрд░ рдорд┐рд╢реНрд░рд┐рдд рднрд╛рд╖рд╛ рд╕рдордЭрддрд╛ рд╣реВрдВ
тАв рд╕рдВрджрд░реНрдн рдпрд╛рдж рд░рдЦрддрд╛ рд╣реВрдВ
тАв рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕реБрдЭрд╛рд╡ рджреЗрддрд╛ рд╣реВрдВ

рдмрд╛рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░? рдмрд╕ рдорд╛рдЗрдХреНрд░реЛрдлреЛрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ! ЁЯОд`,

    helpOptions: `ЁЯдЦ **рдореИрдВ рдЖрдкрдХрд╛ рд╕рдВрдкреВрд░реНрдг рдЦреЗрддреА рд╕рд╣рд╛рдпрдХ рд╣реВрдВ!**

рдпрд╣рд╛рдВ рд╕рдм рдХреБрдЫ рд╣реИ рдЬрд┐рд╕рдореЗрдВ рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:

**ЁЯМ▒ рдХрд╛рд░реНрдмрди рдФрд░ рд╕реНрдерд┐рд░рддрд╛:**
тАв рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ рдХреЗ рдЕрд╡рд╕рд░
тАв рдЯрд┐рдХрд╛рдК рдЦреЗрддреА рдХреЗ рддрд░реАрдХреЗ
тАв рдкрд░реНрдпрд╛рд╡рд░рдгреАрдп рдкреНрд░рдорд╛рдгрди
тАв рдЬрд▓рд╡рд╛рдпреБ-рд╕реНрдорд╛рд░реНрдЯ рдХреГрд╖рд┐

**ЁЯТ░ рд╡рд┐рддреНрддреАрдп рдпреЛрдЬрдирд╛:**
тАв рдЖрдп рдХреА рдЧрдгя┐╜я┐╜я┐╜рд╛
тАв рд▓рд╛рдЧрдд-рд▓рд╛рдн рд╡рд┐рд╢реНрд▓реЗрд╖рдг
тАв рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рдХреА рдЬрд╛рдирдХрд╛рд░реА
тАв рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдп рдХреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА

**ЁЯУ▒ рддрдХрдиреАрдХреА рд╕рд╣рд╛рдпрддрд╛:**
тАв рдРя┐╜я┐╜я┐╜ рдЙрдкрдпреЛрдЧ рдорд╛рд░реНрдЧрджрд░реНрд╢рди
тАв рдЖрд╡рд╛рдЬрд╝реА рдХрдорд╛рдВрдб рд╕рд╣рд╛рдпрддрд╛
тАв рдлреЛрдЯреЛ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝реАрдХрд░рдг рдЯрд┐рдкреНрд╕
тАв рдбреЗрдЯрд╛ рд╕рд┐рдВрдХрд┐рдВрдЧ рд╕рдорд╕реНрдпрд╛ рдирд┐рд╡рд╛рд░рдг

**ЁЯОп рдЖрд╡рд╛рдЬрд╝реА рдХрдорд╛рдВрдб рдЖрдЬрд╝рдорд╛рдПрдВ:**
"рдореЗрд░реА рдХрдорд╛рдИ рдмрддрд╛рдУ"
"рдХрд╛рд░реНрдмрди рдкреНрд░реЛрдЬреЗрдХреНрдЯ рджрд┐рдЦрд╛рдУ"
"рдХреМрди рд╕реА рдлрд╕рд▓ рд▓рдЧрд╛рдКрдВ?"
"рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдХреИрд╕реЗ рдХрд░реВрдВ?"

рдмрд╕ рдкреНрд░рд╛рдХреГрддрд┐рдХ рд░реВрдк рд╕реЗ рдмреЛрд▓реЗрдВ - рдореИрдВ рд╕рдВрджрд░реНрдн рд╕рдордЭрддрд╛ рд╣реВрдВ рдФрд░ рд╣рдорд╛рд░реА рдмрд╛рддрдЪреАрдд рдпрд╛рдж рд░рдЦрддрд╛ рд╣реВрдВ!`,
  },
};

export default function EnhancedAIChatbot({
  open,
  onOpenChange,
  selectedLanguage,
}: EnhancedAIChatbotProps) {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isMinimized, setIsMinimized] = useState(false);
  const [chatLanguage, setChatLanguage] = useState(selectedLanguage);
  const [isTyping, setIsTyping] = useState(false);
  const [conversationMode, setConversationMode] = useState<
    "text" | "voice" | "phone"
  >("text");
  const [isOnline, setIsOnline] = useState(true);
  const [autoSpeak, setAutoSpeak] = useState(true);

  const recognition = useRef<any>(null);
  const synthesis = useRef<any>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const conversationContext = useRef<string[]>([]);

  // Initialize speech recognition and synthesis
  useEffect(() => {
    if (typeof window !== "undefined") {
      // Speech Recognition
      if (
        "webkitSpeechRecognition" in window ||
        "SpeechRecognition" in window
      ) {
        const SpeechRecognition =
          (window as any).webkitSpeechRecognition ||
          (window as any).SpeechRecognition;
        recognition.current = new SpeechRecognition();
        recognition.current.continuous = false;
        recognition.current.interimResults = false;
        recognition.current.lang =
          languages[chatLanguage as keyof typeof languages]?.voice || "en-US";

        recognition.current.onresult = (event: any) => {
          const transcript = event.results[0][0].transcript;
          setInputMessage(transcript);
          setIsListening(false);
          // Auto-send in voice mode
          if (conversationMode === "voice" || conversationMode === "phone") {
            setTimeout(() => handleSendMessage(transcript), 500);
          }
        };

        recognition.current.onerror = () => {
          setIsListening(false);
          if (conversationMode === "voice" || conversationMode === "phone") {
            // Restart listening in voice mode
            setTimeout(() => startListening(), 1000);
          }
        };
      }

      // Speech Synthesis
      if ("speechSynthesis" in window) {
        synthesis.current = window.speechSynthesis;
      }
    }
  }, [chatLanguage, conversationMode]);

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // Welcome message when chat opens
  useEffect(() => {
    if (open && messages.length === 0) {
      const welcomeMessage: Message = {
        id: Date.now().toString(),
        text:
          enhancedResponses[chatLanguage as keyof typeof enhancedResponses]
            ?.greeting || enhancedResponses.en.greeting,
        sender: "bot",
        timestamp: new Date(),
        language: chatLanguage,
      };
      setMessages([welcomeMessage]);
    }
  }, [open, chatLanguage]);

  const handleSendMessage = async (messageText?: string) => {
    const text = messageText || inputMessage;
    if (!text.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: text,
      sender: "user",
      timestamp: new Date(),
      language: chatLanguage,
      type: conversationMode === "text" ? "text" : "voice",
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputMessage("");
    conversationContext.current.push(text);

    // Show typing indicator
    setIsTyping(true);
    const typingMessage: Message = {
      id: "typing",
      text: "",
      sender: "bot",
      timestamp: new Date(),
      language: chatLanguage,
      isTyping: true,
    };
    setMessages((prev) => [...prev, typingMessage]);

    // Generate AI response with enhanced context awareness
    setTimeout(() => {
      const botResponse = generateEnhancedBotResponse(
        text,
        chatLanguage,
        conversationContext.current,
      );
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        sender: "bot",
        timestamp: new Date(),
        language: chatLanguage,
      };

      setIsTyping(false);
      setMessages((prev) =>
        prev.filter((m) => m.id !== "typing").concat(botMessage),
      );

      // Auto-speak in voice/phone mode
      if (
        (conversationMode === "voice" || conversationMode === "phone") &&
        autoSpeak
      ) {
        setTimeout(() => {
          speakMessage(botResponse, chatLanguage);
        }, 500);
      }

      // Continue listening in voice mode
      if (conversationMode === "voice" || conversationMode === "phone") {
        setTimeout(() => {
          startListening();
        }, 2000);
      }
    }, 1500); // Realistic typing delay
  };

  const generateEnhancedBotResponse = (
    userInput: string,
    language: string,
    context: string[],
  ) => {
    const input = userInput.toLowerCase();
    const responses =
      enhancedResponses[language as keyof typeof enhancedResponses] ||
      enhancedResponses.en;

    // Context-aware responses
    const hasDiscussedCredits = context.some(
      (msg) => msg.includes("carbon") || msg.includes("рдХрд╛рд░реНрдмрди"),
    );
    const hasDiscussedRegistration = context.some(
      (msg) => msg.includes("register") || msg.includes("рдкрдВрдЬреАрдХрд░я┐╜я┐╜"),
    );

    // Enhanced pattern matching with context
    if (
      input.includes("carbon") ||
      input.includes("рдХрд╛рд░реНрдмрди") ||
      input.includes("credit")
    ) {
      return responses.carbonCredits;
    } else if (
      input.includes("mrv") ||
      input.includes("рдирд┐рдЧрд░рд╛рдиреА") ||
      input.includes("monitoring")
    ) {
      return responses.mrvProcess;
    } else if (
      input.includes("register") ||
      input.includes("signup") ||
      input.includes("рдкрдВрдЬреАрдХрд░рдг") ||
      input.includes("join")
    ) {
      return responses.registration;
    } else if (
      input.includes("earn") ||
      input.includes("income") ||
      input.includes("рдХрдорд╛рдИ") ||
      input.includes("рдЖрдп") ||
      input.includes("money") ||
      input.includes("price")
    ) {
      return responses.earnings;
    } else if (
      input.includes("voice") ||
      input.includes("speak") ||
      input.includes("mic") ||
      input.includes("рдмреЛрд▓") ||
      input.includes("рдЖрд╡рд╛рдЬрд╝")
    ) {
      return responses.voiceHelp || responses.helpOptions;
    } else if (
      input.includes("help") ||
      input.includes("рдорджрдж") ||
      input.includes("рд╕рд╣рд╛рдпрддрд╛") ||
      input.includes("what can you do")
    ) {
      return responses.helpOptions;
    } else if (
      input.includes("farm size") ||
      input.includes("hectare") ||
      input.includes("acre") ||
      input.includes("рд╣реЗрдХреНрдЯреЗрдпрд░")
    ) {
      return language === "hi"
        ? `ЁЯМ╛ **рдЦреЗрдд рдХрд╛ рдЖрдХрд╛рд░ рдФрд░ рдХрдорд╛рдИ:**\n\nрдореБрдЭреЗ рдмрддрд╛рдПрдВ рдЖрдкрдХрд╛ рдЦреЗрдд рдХрд┐рддрдирд╛ рдмрдбрд╝рд╛ рд╣реИ:\nтАв рдЫреЛрдЯрд╛ рдЦреЗрдд (1-2 рд╣реЗрдХреНрдЯреЗрдпрд░)\nтАв рдордзреНрдпрдо рдЦреЗрдд (3-5 рд╣реЗрдХреНрдЯреЗрдпрд░)\nтАв рдмрдбрд╝рд╛ рдЦреЗрдд (5+ рд╣реЗрдХреНрдЯреЗрдпрд░)\n\nрдореИрдВ рдЖрдкрдХреЗ рд▓рд┐рдП рд╕рдЯреАрдХ рдХрдорд╛рдИ рдХреА рдЧрдгрдирд╛ рдХрд░ рджреВрдВрдЧрд╛! ЁЯТ░`
        : `ЁЯМ╛ **Farm Size & Earnings:**\n\nTell me your farm size:\nтАв Small farm (1-2 hectares)\nтАв Medium farm (3-5 hectares)\nтАв Large farm (5+ hectares)\n\nI'll calculate exact earnings for you! ЁЯТ░`;
    } else if (
      input.includes("crops") ||
      input.includes("рдлрд╕рд▓") ||
      input.includes("plant") ||
      input.includes("grow")
    ) {
      return language === "hi"
        ? `ЁЯМ╛ **рдлрд╕рд▓ рд╕рд▓рд╛рд╣:**\n\nрдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ рдХреЗ рд▓рд┐рдП рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреА рдлрд╕я┐╜я┐╜реЗрдВ:\nтАв **рдзрд╛рди**: SRI рд╡рд┐рдзрд┐ рд╕реЗ 30% рдЕрдзрд┐рдХ рдХрдорд╛рдИ\nтАв **рдЧреЗрд╣реВрдВ**: рдЬрд╝реАрд░реЛ рдЯрд┐рд▓реЗрдЬ рд╕реЗ 2-3 рдХреНрд░реЗрдбрд┐рдЯ/рд╣реЗрдХреНрдЯреЗрдпрд░\nтАв **рджрд╛рд▓реЗрдВ**: рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдлрд┐рдХреНрд╕реЗрд╢рди рд╕реЗ рдЕрддрд┐рд░рд┐рдХреНрдд рд▓рд╛рдн\nтАв **рдмрд╛рдЧрд╡рд╛рдиреА**: рд▓рдВрдмреА рдЕрд╡рдзрд┐ рдореЗрдВ рд╕рдмрд╕реЗ рдЬреНрдпрд╛рджрд╛ рдлрд╛рдпрджрд╛\n\nрдХреМрди рд╕реА рдлрд╕рд▓ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╡рд┐рд╕реНрддрд╛рд░ рд╕реЗ рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?`
        : `ЁЯМ╛ **Crop Advisory:**\n\nBest crops for carbon credits:\nтАв **Rice**: SRI method gives 30% more earnings\nтАв **Wheat**: Zero tillage yields 2-3 credits/hectare\nтАв **Pulses**: Extra benefits from nitrogen fixation\nтАв **Horticulture**: Highest long-term profits\n\nWhich crop would you like to know more about?`;
    } else {
      // Contextual default responses
      if (hasDiscussedCredits && !hasDiscussedRegistration) {
        return language === "hi"
          ? `рдореБрдЭреЗ рдЦреБрд╢реА рд╣реИ рдХрд┐ рдЖрдк рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ рдореЗрдВ рд░реБрдЪрд┐ рд░рдЦрддреЗ рд╣реИрдВ! ЁЯМ▒\n\n**рдЕрдЧрд▓рд╛ рдХрджрдо**: рдкрдВрдЬреАрдХрд░рдг рдХрд░рдХреЗ рдЖрдЬ рд╣реА рд╢реБрд░реБрдЖрдд рдХрд░реЗрдВред рдмрд╕ я┐╜я┐╜рд╣реЗрдВ "рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдХреИрд╕реЗ рдХрд░реЗрдВ" рдпрд╛ рдКрдкрд░ 'Sign in (Farmer)' рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред\n\n**рдпрд╛ рдлрд┐рд░ рдкреВрдЫреЗрдВ:**\nтАв "рдореЗрд░реА рдХрдорд╛рдИ рдХрд┐рддрдиреА рд╣реЛрдЧреА?"\nтАв "рдХреМрди рд╕реА рдлрд╕рд▓ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреА рд╣реИ?"\nтАв "MRV рдХреНрдпрд╛ рд╣реИ?"\n\nрдореИрдВ рдЖрдкрдХреА рдкреВрд░реА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБ! ЁЯШК`
          : `Great to see your interest in carbon credits! ЁЯМ▒\n\n**Next Step**: Register today to get started. Just say "how to register" or click 'Sign in (Farmer)' above.\n\n**Or ask me:**\nтАв "What will be my earnings?"\nтАв "Which crop is best?"\nтАв "What is MRV?"\n\nI'm here to help you succeed! ЁЯШК`;
      } else {
        return language === "hi"
          ? `рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред ЁЯдФ рдореИрдВ рдЗрди рд╡рд┐рд╖рдпреЛрдВ рдореЗрдВ рдЖрдкрдХреА рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:\n\n**ЁЯМ▒ рдореБрдЦреНрдп рд╡рд┐рд╖рдп:**\nтАв "рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ рдХреНрдпрд╛ рд╣реИ?"\nтАв "рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдХреИрд╕реЗ рдХрд░реЗрдВ?"\nтАв "рдореЗрд░реА рдХрдорд╛рдИ рдХрд┐рддрдиреА рд╣реЛрдЧреА?"\nтАв "рдХреМрди рд╕реА рдлрд╕рд▓ рд▓рдЧрд╛рдКрдВ?"\n\n**ЁЯОд рдЖрд╡рд╛рдЬрд╝реА рд╕рд╣рд╛рдпрддрд╛:** "voice help"\n\nрдмрд╕ рдкреНрд░рд╛рдХреГрддрд┐рдХ рд░реВрдк рд╕реЗ рдмреЛрд▓реЗрдВ рдпрд╛ рдЯрд╛рдЗрдк рдХрд░реЗрдВ - рдореИрдВ рдЖрдкрдХреА рднрд╛рд╖рд╛ рд╕рдордЭрддрд╛ рд╣реВрдВ! ЁЯШК`
          : `I didn't quite understand that. ЁЯдФ I can help you with:\n\n**ЁЯМ▒ Main Topics:**\nтАв "What are carbon credits?"\nтАв "How to register?"\nтАв "What will I earn?"\nтАв "Which crops to grow?"\n\n**ЁЯОд Voice Help:** "voice help"\n\nJust speak or type naturally - I understand your language! ЁЯШК`;
      }
    }
  };

  const startListening = () => {
    if (recognition.current && !isListening) {
      setIsListening(true);
      recognition.current.lang =
        languages[chatLanguage as keyof typeof languages]?.voice || "en-US";
      recognition.current.start();
    } else if (!recognition.current) {
      toast.error(
        chatLanguage === "hi"
          ? "рдЖрдкрдХрд╛ рдмреНрд░рд╛рдЙрдЬрд╝рд░ рд╡реЙрдпрд╕ рдХреЛ рд╕рдкреЛрд░реНрдЯ рдирд╣реАя┐╜я┐╜ рдХрд░рддрд╛"
          : "Voice recognition not supported",
      );
    }
  };

  const stopListening = () => {
    if (recognition.current) {
      recognition.current.stop();
      setIsListening(false);
    }
  };

  const speakMessage = (text: string, language: string) => {
    if (synthesis.current && text) {
      setIsSpeaking(true);
      // Remove markdown formatting for speech
      const cleanText = text
        .replace(/\*\*(.*?)\*\*/g, "$1")
        .replace(/[тАв*#]/g, "")
        .replace(/\n/g, " ");

      const utterance = new SpeechSynthesisUtterance(cleanText);
      utterance.lang =
        languages[language as keyof typeof languages]?.voice || "en-US";
      utterance.rate = 0.9;
      utterance.pitch = 1.1;
      utterance.volume = 0.8;

      utterance.onend = () => {
        setIsSpeaking(false);
      };
      utterance.onerror = () => {
        setIsSpeaking(false);
      };

      synthesis.current.cancel(); // Cancel any ongoing speech
      synthesis.current.speak(utterance);
    }
  };

  const stopSpeaking = () => {
    if (synthesis.current) {
      synthesis.current.cancel();
      setIsSpeaking(false);
    }
  };

  const toggleConversationMode = () => {
    const modes: Array<"text" | "voice" | "phone"> = ["text", "voice", "phone"];
    const currentIndex = modes.indexOf(conversationMode);
    const nextMode = modes[(currentIndex + 1) % modes.length];
    setConversationMode(nextMode);

    if (nextMode === "voice" || nextMode === "phone") {
      toast.success(
        chatLanguage === "hi"
          ? `ЁЯОд ${nextMode === "phone" ? "рдлреЛрди рдХреЙрд▓" : "рд╡реЙрдпрд╕"} рдореЛрдб рдЪрд╛рд▓реВред рдмреЛрд▓рдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ!`
          : `ЁЯОд ${nextMode === "phone" ? "Phone Call" : "Voice"} mode activated. Start speaking!`,
      );
      setTimeout(() => startListening(), 1000);
    } else {
      stopListening();
      stopSpeaking();
      toast.info(
        chatLanguage === "hi"
          ? "ЁЯУЭ рдЯреЗрдХреНрд╕реНрдЯ рдореЛрдб рдЪрд╛рд▓реВ"
          : "ЁЯУЭ Text mode activated",
      );
    }
  };

  const copyMessage = (text: string) => {
    navigator.clipboard.writeText(text);
    toast.success(
      chatLanguage === "hi" ? "ЁЯУЛ рдХреЙрдкреА рд╣реЛ рдЧрдпрд╛!" : "ЁЯУЛ Copied to clipboard!",
    );
  };

  const clearChat = () => {
    setMessages([]);
    conversationContext.current = [];
    const welcomeMessage: Message = {
      id: Date.now().toString(),
      text:
        enhancedResponses[chatLanguage as keyof typeof enhancedResponses]
          ?.greeting || enhancedResponses.en.greeting,
      sender: "bot",
      timestamp: new Date(),
      language: chatLanguage,
    };
    setMessages([welcomeMessage]);
    toast.success(
      chatLanguage === "hi" ? "ЁЯФД рдЪреИрдЯ рдХреНрд▓рд┐рдпрд░ рд╣реЛ рдЧрдпрд╛" : "ЁЯФД Chat cleared",
    );
  };

  const formatMessage = (text: string) => {
    // Convert markdown-style formatting to JSX
    return text.split("\n").map((line, index) => {
      // Bold text
      const boldFormatted = line.replace(
        /\*\*(.*?)\*\*/g,
        "<strong>$1</strong>",
      );
      // Bullet points
      const bulletFormatted = boldFormatted
        .replace(/^тАв /, "тАв ")
        .replace(/^тАв/, "тАв");

      return (
        <span
          key={index}
          dangerouslySetInnerHTML={{ __html: bulletFormatted }}
        />
      );
    });
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-4xl h-[90vh] p-0 bg-gradient-to-br from-green-50 via-white to-emerald-50">
        <DialogHeader className="p-6 pb-2 border-b bg-white/80 backdrop-blur">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="relative">
                <Avatar className="h-12 w-12 bg-gradient-to-r from-green-600 to-emerald-600 border-2 border-white shadow-lg">
                  <AvatarFallback className="text-white font-bold text-lg">
                    <Bot className="h-6 w-6" />
                  </AvatarFallback>
                </Avatar>
                {isOnline && (
                  <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white rounded-full animate-pulse"></div>
                )}
              </div>
              <div>
                <DialogTitle className="flex items-center space-x-2 text-xl">
                  <span className="bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent font-bold">
                    Kisan AI Assistant
                  </span>
                  <Sparkles className="h-5 w-5 text-yellow-500 animate-pulse" />
                </DialogTitle>
                <div className="flex items-center space-x-2 text-sm">
                  <Badge
                    variant="outline"
                    className="bg-green-100 text-green-700 border-green-300"
                  >
                    ЁЯЯв Online
                  </Badge>
                  <Badge
                    variant="outline"
                    className={cn(
                      "text-xs",
                      conversationMode === "text" &&
                        "bg-blue-100 text-blue-700",
                      conversationMode === "voice" &&
                        "bg-purple-100 text-purple-700",
                      conversationMode === "phone" && "bg-red-100 text-red-700",
                    )}
                  >
                    {conversationMode === "text" && "ЁЯУЭ Text"}
                    {conversationMode === "voice" && "ЁЯОд Voice"}
                    {conversationMode === "phone" && "ЁЯУЮ Phone"}
                  </Badge>
                  {isListening && (
                    <Badge
                      variant="outline"
                      className="bg-red-100 text-red-700 animate-pulse"
                    >
                      ЁЯОд Listening...
                    </Badge>
                  )}
                  {isSpeaking && (
                    <Badge
                      variant="outline"
                      className="bg-green-100 text-green-700 animate-pulse"
                    >
                      ЁЯФК Speaking...
                    </Badge>
                  )}
                </div>
              </div>
            </div>

            <div className="flex items-center space-x-2">
              <Select value={chatLanguage} onValueChange={setChatLanguage}>
                <SelectTrigger className="w-36 bg-white/80">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {Object.entries(languages).map(([code, lang]) => (
                    <SelectItem key={code} value={code}>
                      <span className="flex items-center space-x-2">
                        <span>{lang.flag}</span>
                        <span>{lang.name}</span>
                      </span>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Button
                variant="outline"
                size="sm"
                onClick={toggleConversationMode}
              >
                {conversationMode === "text" && (
                  <MessageCircle className="h-4 w-4" />
                )}
                {conversationMode === "voice" && <Mic className="h-4 w-4" />}
                {conversationMode === "phone" && <Phone className="h-4 w-4" />}
              </Button>

              <Button variant="outline" size="sm" onClick={clearChat}>
                <RotateCcw className="h-4 w-4" />
              </Button>

              <Button
                variant="outline"
                size="sm"
                onClick={() => setIsMinimized(!isMinimized)}
              >
                {isMinimized ? (
                  <Maximize2 className="h-4 w-4" />
                ) : (
                  <Minimize2 className="h-4 w-4" />
                )}
              </Button>
            </div>
          </div>
        </DialogHeader>

        {!isMinimized && (
          <div className="flex flex-col flex-1 min-h-0">
            {/* Chat Messages */}
            <ScrollArea className="flex-1 p-6">
              <div className="space-y-6">
                {messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}
                  >
                    <div
                      className={`max-w-[85%] ${message.sender === "user" ? "ml-4" : "mr-4"}`}
                    >
                      <div
                        className={cn(
                          "rounded-2xl px-6 py-4 shadow-lg",
                          message.sender === "user"
                            ? "bg-gradient-to-r from-green-600 to-emerald-600 text-white"
                            : "bg-white border border-gray-200 text-gray-900",
                        )}
                      >
                        <div className="flex items-start space-x-3">
                          {message.sender === "bot" && (
                            <Avatar className="h-8 w-8 bg-gradient-to-r from-green-600 to-emerald-600 mt-1">
                              <AvatarFallback className="text-white">
                                <Bot className="h-4 w-4" />
                              </AvatarFallback>
                            </Avatar>
                          )}

                          <div className="flex-1 min-w-0">
                            {message.isTyping ? (
                              <div className="flex items-center space-x-2">
                                <Loader2 className="h-4 w-4 animate-spin text-green-600" />
                                <span className="text-gray-600 text-sm animate-pulse">
                                  {chatLanguage === "hi"
                                    ? "рдЯрд╛рдЗрдк рдХрд░ рд░рд╣рд╛ рд╣реИ..."
                                    : "Typing..."}
                                </span>
                              </div>
                            ) : (
                              <>
                                <div
                                  className={cn(
                                    "text-base leading-relaxed",
                                    message.sender === "user"
                                      ? "text-white"
                                      : "text-gray-900",
                                  )}
                                >
                                  {message.sender === "bot" ? (
                                    <div className="space-y-2">
                                      {formatMessage(message.text)}
                                    </div>
                                  ) : (
                                    message.text
                                  )}
                                </div>

                                <div className="flex items-center justify-between mt-3">
                                  <span
                                    className={cn(
                                      "text-xs",
                                      message.sender === "user"
                                        ? "text-green-100"
                                        : "text-gray-500",
                                    )}
                                  >
                                    {message.timestamp.toLocaleTimeString()}
                                    {message.type === "voice" && " ЁЯОд"}
                                  </span>

                                  <div className="flex items-center space-x-2">
                                    {message.sender === "bot" && (
                                      <>
                                        <Button
                                          variant="ghost"
                                          size="sm"
                                          onClick={() =>
                                            copyMessage(message.text)
                                          }
                                          className="h-6 w-6 p-0 hover:bg-gray-100"
                                        >
                                          <Copy className="h-3 w-3" />
                                        </Button>
                                        <Button
                                          variant="ghost"
                                          size="sm"
                                          onClick={() =>
                                            speakMessage(
                                              message.text,
                                              message.language,
                                            )
                                          }
                                          className="h-6 w-6 p-0 hover:bg-gray-100"
                                        >
                                          <Volume2 className="h-3 w-3" />
                                        </Button>
                                      </>
                                    )}
                                  </div>
                                </div>
                              </>
                            )}
                          </div>

                          {message.sender === "user" && (
                            <Avatar className="h-8 w-8 bg-gradient-to-r from-blue-600 to-purple-600 mt-1">
                              <AvatarFallback className="text-white">
                                <User className="h-4 w-4" />
                              </AvatarFallback>
                            </Avatar>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
                <div ref={messagesEndRef} />
              </div>
            </ScrollArea>

            {/* Quick Actions */}
            <div className="p-6 border-t bg-white/80 backdrop-blur">
              <div className="flex flex-wrap gap-2 mb-4">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() =>
                    setInputMessage(
                      chatLanguage === "hi"
                        ? "рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ рдХреНрдпрд╛ рд╣реИ?"
                        : "What are carbon credits?",
                    )
                  }
                  className="bg-green-50 hover:bg-green-100 border-green-200"
                >
                  {chatLanguage === "hi"
                    ? "ЁЯМ▒ рдХрд╛рд░реНрдмрди рдХреНрд░реЗрдбрд┐рдЯ"
                    : "ЁЯМ▒ Carbon Credits"}
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() =>
                    setInputMessage(
                      chatLanguage === "hi"
                        ? "рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдХреИрд╕реЗ рдХрд░реВрдВ?"
                        : "How do I register?",
                    )
                  }
                  className="bg-blue-50 hover:bg-blue-100 border-blue-200"
                >
                  {chatLanguage === "hi" ? "ЁЯУЭ рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд░реЗрдВ" : "ЁЯУЭ Register"}
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() =>
                    setInputMessage(
                      chatLanguage === "hi"
                        ? "рдореИрдВ рдХрд┐рддрдирд╛ рдХрдорд╛ рд╕рдХрддрд╛ рд╣реВрдВ?"
                        : "How much can I earn?",
                    )
                  }
                  className="bg-amber-50 hover:bg-amber-100 border-amber-200"
                >
                  {chatLanguage === "hi" ? "ЁЯТ░ рдХрдорд╛рдИ" : "ЁЯТ░ Earnings"}
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setInputMessage("voice help")}
                  className="bg-purple-50 hover:bg-purple-100 border-purple-200"
                >
                  ЁЯОд Voice Help
                </Button>
              </div>

              {/* Input Area */}
              <div className="flex items-center space-x-3">
                <div className="flex-1 relative">
                  <Input
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    placeholder={
                      chatLanguage === "hi"
                        ? conversationMode === "voice"
                          ? "рдмреЛрд▓реЗрдВ рдпрд╛ рдЯрд╛рдЗрдк рдХрд░реЗрдВ..."
                          : "рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдЯрд╛рдЗрдк рдХрд░реЗрдВ..."
                        : conversationMode === "voice"
                          ? "Speak or type..."
                          : "Type your question..."
                    }
                    onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                    className="pr-12 bg-white border-gray-300 focus:border-green-500 focus:ring-green-500"
                    disabled={conversationMode === "phone"}
                  />
                  <Button
                    variant="ghost"
                    size="sm"
                    className={cn(
                      "absolute right-2 top-1 h-8 w-8",
                      isListening
                        ? "text-red-600 animate-pulse"
                        : "text-gray-600",
                    )}
                    onClick={isListening ? stopListening : startListening}
                  >
                    {isListening ? (
                      <MicOff className="h-4 w-4" />
                    ) : (
                      <Mic className="h-4 w-4" />
                    )}
                  </Button>
                </div>

                <Button
                  onClick={() => handleSendMessage()}
                  disabled={!inputMessage.trim()}
                  className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 shadow-lg"
                >
                  <Send className="h-4 w-4" />
                </Button>

                <Button
                  variant="outline"
                  onClick={isSpeaking ? stopSpeaking : () => {}}
                  className={cn(
                    "shadow-lg",
                    isSpeaking
                      ? "text-red-600 border-red-300"
                      : "text-gray-600",
                  )}
                >
                  {isSpeaking ? (
                    <VolumeX className="h-4 w-4" />
                  ) : (
                    <Volume2 className="h-4 w-4" />
                  )}
                </Button>
              </div>

              {conversationMode !== "text" && (
                <div className="mt-3 text-center">
                  <p className="text-sm text-gray-600 flex items-center justify-center space-x-2">
                    <Zap className="h-4 w-4 text-green-600" />
                    <span>
                      {chatLanguage === "hi"
                        ? conversationMode === "phone"
                          ? "ЁЯУЮ рдлреЛрди рдХреЙрд▓ рдореЛрдб - рд╣рд╛рде-рдореБрдХреНрдд рдмрд╛рддрдЪреАрдд рдХрд░реЗрдВ"
                          : "ЁЯОд рд╡реЙрдпрд╕ рдореЛрдб - рдмрд╕ рдмреЛрд▓рдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ"
                        : conversationMode === "phone"
                          ? "ЁЯУЮ Phone Call Mode - Hands-free conversation"
                          : "ЁЯОд Voice Mode - Just start speaking"}
                    </span>
                  </p>
                </div>
              )}
            </div>
          </div>
        )}
      </DialogContent>
    </Dialog>
  );
}
